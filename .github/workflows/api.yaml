name: CI Pipeline Build API

on:
  workflow_run:
    workflows:
      - Pre-Flow Actions
    branches: [main]
    types:
      - completed

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: badgercorp  # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  ARTIFACT: xd-banking-api
  BADGER_VERSION: 0.2.19
  FIANU_KEY: k8s://default/cosign
  REKOR_HOST: ${{ secrets.REKOR_URL }}
  GITHUB_CONTEXT: ${{ toJSON(github) }}

defaults:
  run:
    working-directory: ./xd-banking-api

jobs:

  init:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: badger
        uses: nick-invision/private-action-loader@v3
        with:
          pal-repo-token: ${{ secrets.GH_ACCESS_TOKEN }}
          pal-repo-name: badgercorp/actions
          version: ${{ env.BADGER_VERSION }}
          authorization: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Capture
        run: |-
          badger capture build

  gobuild:

    name: Go Build and Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  dockerbuild:

    name: Docker Build, Scan, & Publish
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write # Needed for keyless.
      contents: read
      # actions permissions are needed to read info on the workflow and
      # workflow run.
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Setup gcloud CLI
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: badger
        uses: nick-invision/private-action-loader@v3
        with:
          pal-repo-token: ${{ secrets.GH_ACCESS_TOKEN }}
          pal-repo-name: badgercorp/actions
          version: ${{ env.BADGER_VERSION }}
          authorization: ${{ secrets.GH_ACCESS_TOKEN }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - uses: imjasonh/setup-ko@v0.4

      - name: Setup
        run: |-
          badger set-version
          export VERSION="$(badger get version)"
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Running Horusec Security
        run: |-
          badger attestor wrap --step horusec.download --key $FIANU_KEY --rekor-url $REKOR_HOST --output-file result.json -- \
            curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest
          
          SAST_STATEMENTS=$(badger attestor hash --path result.json)
                              
          badger attestor wrap --step horusec.scan --key $FIANU_KEY --output-file result.json -- \
            horusec start -p="./" -o json -O sast.horusec.report.json
          
          echo "SAST_STATEMENTS=$SAST_STATEMENTS" >> $GITHUB_ENV
      - run: |-
          badger capture data \
            --statements $SAST_STATEMENTS --type sast --input sast.horusec.report.json --version $VERSION --key $FIANU_KEY --rekor-url $REKOR_HOST --attest
       # Build the Docker image
      - name: Build API
        run: |-
          badger attestor wrap --step ko.build --key $FIANU_KEY --rekor-url $REKOR_HOST --output-file result.json -- \
            docker tag $(ko build github.com/badgercorp/xd-banking-api/cmd/api --image-label version=$VERSION -t $VERSION --push=false --local) "gcr.io/$PROJECT_ID/$ARTIFACT:$VERSION"
          
          ARTIFACT_STATEMENTS=$(badger attestor hash --path result.json)
          echo "ARTIFACT_STATEMENTS=$ARTIFACT_STATEMENTS" >> $GITHUB_ENV

      - uses: anchore/scan-action/download-grype@v3
        id: grype
        with:
          grype-version: v0.43.0

      - run: |-
          badger attestor wrap --step grype.scan --key $FIANU_KEY --rekor-url $REKOR_HOST --output-file result.json -- \
            ${{steps.grype.outputs.cmd}} -o json --file grype_scan.json gcr.io/$PROJECT_ID/$ARTIFACT:$VERSION
          
          GRYPE_STATEMENTS=$(badger attestor hash --path result.json)
          echo "GRYPE_STATEMENTS=$GRYPE_STATEMENTS" >> $GITHUB_ENV

      - run: |-
          COMBINED="$ARTIFACT_STATEMENTS,$GRYPE_STATEMENTS"
          badger capture data \
            --statements $COMBINED --key $FIANU_KEY --type containerscan --rekor-url $REKOR_HOST --attest  --input grype_scan.json --version=$VERSION

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: main

      - name: Publish Artifact Image
        run: |-
          IMAGE=$ARTIFACT

          badger attestor wrap --step docker.push --key $FIANU_KEY --rekor-url $REKOR_HOST --output-file result.json -- \
            docker push "gcr.io/$PROJECT_ID/$IMAGE:$VERSION"
          PUBLISH_STATEMENTS=$(badger attestor hash --path result.json)
          
          badger attestor wrap --step cosign.sign --key $FIANU_KEY --rekor-url $REKOR_HOST --output-file result.json -- \
            cosign sign -a version=$VERSION -a commit=$GITHUB_SHA --key k8s://default/cosign "gcr.io/$PROJECT_ID/$IMAGE:$VERSION"
          PUBLISH_STATEMENTS=$PUBLISH_STATEMENTS,$(badger attestor hash --path result.json)
          
          cosign verify --key k8s://default/cosign "gcr.io/$PROJECT_ID/$IMAGE:$VERSION"
          
          badger attestor wrap --step cosign.generate --key $FIANU_KEY --rekor-url $REKOR_HOST --output-file result.json -- \
            cosign generate -a version=$VERSION -a commit=$GITHUB_SHA --output-file=sig.json "gcr.io/$PROJECT_ID/$IMAGE:$VERSION"
          PUBLISH_STATEMENTS=$PUBLISH_STATEMENTS,$(badger attestor hash --path result.json)
          
          echo "PUBLISH_STATEMENTS=$PUBLISH_STATEMENTS" >> $GITHUB_ENV

      - name: Capture Sign
        run: |-
          COMBINED="$ARTIFACT_STATEMENTS,$PUBLISH_STATEMENTS"
          badger capture sign --statements $COMBINED --cosign-output-file=sig.json

      - name: Create and Publish Artifact SBOM
        uses: anchore/sbom-action@v0
        with:
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.ARTIFACT }}:${{ env.VERSION }}
          output-file: xd-banking-api/sbom.spdx.json

      - run: |-
          badger capture sbom --syft-output-file=sbom.spdx.json --version=$VERSION